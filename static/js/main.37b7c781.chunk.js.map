{"version":3,"sources":["Quote.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","state","author","quote","imageURL","direction","isLoaded","fetch","then","res","json","result","setState","character","image","characterDirection","error","console","log","this","generateNewQuote","message","className","style","width","maxHeight","src","quoteText","id","title","onClick","bind","href","border","height","borderBottom","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"qPA6FeA,E,YA1FX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,OAAQ,GACRC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXC,UAAU,GAPC,E,gFAWC,IAAD,OACjBC,MAAM,gDACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCA,EAASA,EAAO,GACd,EAAKC,SAAS,CACdN,UAAU,EACVJ,OAAQS,EAAOE,UACfV,MAAOQ,EAAOR,MACdC,SAAUO,EAAOG,MACjBT,UAAWM,EAAOI,wBAGtB,SAACC,GACCC,QAAQC,IAAIF,GACZ,EAAKJ,SAAS,CACZN,UAAU,EACVU,e,0CAMRG,KAAKC,qB,+BAGG,IAAD,EACyDD,KAAKlB,MAA7De,EADD,EACCA,MAAOV,EADR,EACQA,SAAUJ,EADlB,EACkBA,OAAQC,EAD1B,EAC0BA,MAAOC,EADjC,EACiCA,SAAUC,EAD3C,EAC2CA,UAClD,GAAIW,EACF,OAAO,uCAAaA,EAAMK,SACrB,GAAKf,EAEL,CAIL,IAAMQ,EACE,yBAAKQ,UAAU,YACX,yBAAKA,UAAU,YAAYC,MAAO,CAACC,MAAO,OAAQC,UAAW,SAAUC,IAAKtB,KAElFuB,EACE,yBAAKL,UAAU,YACX,uBAAGM,GAAG,QAAQT,KAAKlB,MAAME,OACzB,4BAAQyB,GAAG,SAASN,UAAU,qBAAqBpB,EAAnD,SAAgE,0BAAM2B,MAAM,gBAAZ,iBAChE,4BAAQD,GAAG,YAAYN,UAAU,uBAAuBQ,QAASX,KAAKC,iBAAiBW,KAAKZ,OAA5F,sBACA,uBAAGa,KAAI,iDAA4C7B,EAA5C,gBAAyDD,EAAzD,sBAAqF2B,MAAM,UAAUP,UAAU,6BAA4B,uBAAGA,UAAU,mBAA/J,WAGZ,OACE,yBAAKM,GAAG,YAAYN,UAAU,sBAAsBC,MAAO,CAACU,OAAQ,kBAAmBC,OAAQ,SAC7F,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,0BAA0BC,MAAO,CAACC,MAAO,OAAOW,aAAc,oBAA7E,yBAKF,yBAAKb,UAAU,aACb,gCAAYA,UAAU,uBAML,SAAdjB,EAAuBS,EAAQa,EAGhB,SAAdtB,EAAuBsB,EAAYb,KAnC7C,OAAO,+C,GA5CGsB,IAAMC,WCYXC,MAVf,WACE,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLC,QAAQD,MAAMA,EAAMK,a","file":"static/js/main.37b7c781.chunk.js","sourcesContent":["import React from 'react'\n\nclass Quote extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            author: '',\n            quote: '',\n            imageURL: '',\n            direction: '',\n            isLoaded: false\n        }\n    }\n    //Fetches new quotes\n    generateNewQuote() {\n      fetch(\"https://thesimpsonsquoteapi.glitch.me/quotes\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              result = result[0]\n                this.setState({\n                isLoaded: true,\n                author: result.character,\n                quote: result.quote,\n                imageURL: result.image,\n                direction: result.characterDirection\n              });\n            },\n            (error) => {\n              console.log(error)\n              this.setState({\n                isLoaded: true,\n                error\n              });\n            }\n          )\n    }\n    componentDidMount() {\n        this.generateNewQuote();\n      }\n\n      render() {\n        const { error, isLoaded, author, quote, imageURL, direction } = this.state;\n        if (error) {\n          return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n          return <div>Loading...</div>;\n        } else {\n          /*Gets the image and quote text so we can display them in the direction\n           the character is facing\n           */\n          const image =(\n                  <div className=\"col-sm-3\">\n                      <img className=\"img-fluid\" style={{width: \"100%\", maxHeight: \"300px\"}} src={imageURL}/>\n                  </div>)\n          const quoteText = (\n                  <div className=\"col-sm-9\">\n                      <p id=\"text\">{this.state.quote}</p>\n                      <footer id=\"author\" className=\"blockquote-footer\">{author} from <cite title=\"Source Title\">The Simpsons</cite></footer>\n                      <button id=\"new-quote\" className=\"mt-1 btn btn-success\" onClick={this.generateNewQuote.bind(this)}>Generate New Quote</button>\n                      <a href={`https://twitter.com/intent/tweet?text=\"${quote}\" by ${author} from The Simpsons`} title=\"Twitter\" className=\"ml-2 mt-1 btn btn-primary\"><i className=\"fab fa-twitter\"></i> Tweet</a>\n                  </div>)\n\n          return (\n            <div id=\"quote-box\" className=\"card mt-5 container\" style={{border: \"2px solid black\", height: \"100%\"}}>\n              <div className=\"row\">\n                <div className=\"card-header text-center\" style={{width: \"100%\",borderBottom: \"2px solid black\"}}>\n                  Random Quote Machine\n                </div>\n              </div>\n              \n              <div className=\"card-body\">\n                <blockquote className=\"blockquote mb-0 row\">\n                  {/*\n                    Figure out which direction the character is facing\n                    and render accordingly\n                  */}\n                  {\n                   direction === 'Left' ? image : quoteText\n                  }\n                  {\n                    direction === 'Left' ? quoteText : image\n                  }\n                  \n                  \n                </blockquote>\n              </div>\n            </div>\n          );\n        }\n      }\n}\n\nexport default Quote;","import React from 'react';\nimport './App.css';\nimport Quote from './Quote'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Quote />\n      </header>   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}